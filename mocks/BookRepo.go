// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "archive_lib/entity"

	mock "github.com/stretchr/testify/mock"
)

// BookRepo is an autogenerated mock type for the BookRepo type
type BookRepo struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: ctx, bookPost
func (_m *BookRepo) AddBook(ctx context.Context, bookPost *entity.BookPost) (*entity.Book, error) {
	ret := _m.Called(ctx, bookPost)

	var r0 *entity.Book
	if rf, ok := ret.Get(0).(func(context.Context, *entity.BookPost) *entity.Book); ok {
		r0 = rf(ctx, bookPost)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.BookPost) error); ok {
		r1 = rf(ctx, bookPost)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecrementStock provides a mock function with given fields: ctx, id
func (_m *BookRepo) DecrementStock(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBooksByTitle provides a mock function with given fields: ctx, title
func (_m *BookRepo) GetBooksByTitle(ctx context.Context, title string) ([]entity.Book, error) {
	ret := _m.Called(ctx, title)

	var r0 []entity.Book
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.Book); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementStock provides a mock function with given fields: ctx, id
func (_m *BookRepo) IncrementStock(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAuthorExisted provides a mock function with given fields: ctx, id
func (_m *BookRepo) IsAuthorExisted(ctx context.Context, id int) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsBookExisted provides a mock function with given fields: ctx, id
func (_m *BookRepo) IsBookExisted(ctx context.Context, id int) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsStockAvailable provides a mock function with given fields: ctx, id
func (_m *BookRepo) IsStockAvailable(ctx context.Context, id int) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsTitleExisted provides a mock function with given fields: ctx, title
func (_m *BookRepo) IsTitleExisted(ctx context.Context, title string) (bool, error) {
	ret := _m.Called(ctx, title)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBooks provides a mock function with given fields: ctx
func (_m *BookRepo) ListBooks(ctx context.Context) ([]entity.Book, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Book
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepo creates a new instance of BookRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepo(t mockConstructorTestingTNewBookRepo) *BookRepo {
	mock := &BookRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
