// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "archive_lib/dto"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, authRequest
func (_m *UserUsecase) Login(ctx context.Context, authRequest *dto.AuthRequest) (*dto.AuthResponse, error) {
	ret := _m.Called(ctx, authRequest)

	var r0 *dto.AuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dto.AuthRequest) *dto.AuthResponse); ok {
		r0 = rf(ctx, authRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.AuthRequest) error); ok {
		r1 = rf(ctx, authRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
