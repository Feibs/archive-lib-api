// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "archive_lib/dto"

	mock "github.com/stretchr/testify/mock"
)

// BookUsecase is an autogenerated mock type for the BookUsecase type
type BookUsecase struct {
	mock.Mock
}

// AddBook provides a mock function with given fields: ctx, bookRequest
func (_m *BookUsecase) AddBook(ctx context.Context, bookRequest *dto.BookRequest) (*dto.BookResponse, error) {
	ret := _m.Called(ctx, bookRequest)

	var r0 *dto.BookResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dto.BookRequest) *dto.BookResponse); ok {
		r0 = rf(ctx, bookRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BookResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dto.BookRequest) error); ok {
		r1 = rf(ctx, bookRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBooksByTitle provides a mock function with given fields: ctx, title
func (_m *BookUsecase) GetBooksByTitle(ctx context.Context, title string) ([]*dto.BookResponse, error) {
	ret := _m.Called(ctx, title)

	var r0 []*dto.BookResponse
	if rf, ok := ret.Get(0).(func(context.Context, string) []*dto.BookResponse); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BookResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBooks provides a mock function with given fields: ctx
func (_m *BookUsecase) ListBooks(ctx context.Context) ([]*dto.BookResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*dto.BookResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*dto.BookResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BookResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookUsecase creates a new instance of BookUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookUsecase(t mockConstructorTestingTNewBookUsecase) *BookUsecase {
	mock := &BookUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
